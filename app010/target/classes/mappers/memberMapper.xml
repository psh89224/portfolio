<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	...131p.http://www.mybatis.org/mybatis-3/getting-started.html
	아래쪽 Exploring Mapped SQL Statements 참조.
	XML Mapper를 작성할 때는 클래스의 패키지와 유사한 용도로, MyBatis내에서 원하는 SQL문을 찾을 수 있는
	namespace 설정에 가장 신경을 많이 써야 함.
	XML Mapper는 root-context.xml에서 스프링이 인식하도록 등록함.
	/zex00/src/main/webapp/WEB-INF/spring/root-context.xml
 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- 패키지익스플로러와 상관없이 개발자가 여기서 지정한 경로명이
프로젝트에서 통용됨. -->
<mapper namespace="org.joy.mapper.MemberMapper">

  <select id="getTime" resultType="String">
    select now()
  </select>
  
  <insert id="insertMember">
    insert into ZTBL_MEMBER (USER_ID, USER_PW, USER_NAME, EMAIL, REG_DATE) 
    			values (#{user_id}, #{user_pw}, #{user_name}, #{email}, now())
  </insert>  
  
<!-- 
	...143p. MyBatis는 기본적으로 PreparedStatement를 이용해서 처리됨.
	개발자가 PreparedStatement에 들어가는 파라미터를 사용할 때는 '#{}'기호를 이용해서 처리함.
	'#{}'의 규칙.
		1. 파라미터가 여러 속성을 가진 객체인 경우 '#{num}'은 getNum() or setNum()을 의미함.
		2. 파라미터가 하나이고, 기본자료형이나 문자열인 경우 값이 그대로 전달됨.
		3. 파라미터가 Map타입인 경우 '#{num}'은 Map객체의 키값이 'num'인 값을 찾는다.
 --> 
  
  <select id="selectMember" 
          resultType="org.joy.domain.MemberVO">
	  select 
	    * 
	  from 
	    ZTBL_MEMBER 
	  where user_id = #{user_id}
  </select>  
  
<!--
	...145p.파라미터가 2개 이상 전달될 경우, Map 타입의 객체로 파라미터를 사용함. 
 -->  
  <select id="selectWithPw" 
         resultType="org.joy.domain.MemberVO">
	  select 
	    * 
	  from 
	    ZTBL_MEMBER 
	  where user_id = #{user_id} 
	    and user_pw = #{user_pw}
  </select>  
  
  
</mapper>